### 안드로이드 앱 개발 강의 13주차 이론 정리 가이드

안드로이드 앱 개발 강의 13주차에서는 스톱워치 프로젝트를 심화 학습하고, 타이머 클래스를 활용하여 타이머 기능을 구현합니다. 이와 함께 코틀린과 안드로이드의 다양한 이론 및 문법 개념을 다룹니다. 이 문서는 학생들이 학기말 시험을 준비할 수 있도록 필요한 이론과 개념을 정리한 것입니다.

---

#### 스톱워치 프로젝트

**프로젝트 개요:**
스톱워치 프로젝트에서는 타이머 기능을 구현하고, FloatingActionButton을 사용하여 타이머를 제어하며, 랩 타임을 기록하여 ScrollView에 표시하는 기능을 구현합니다. 이와 함께 코틀린과 안드로이드의 다양한 개념을 적용하여 실습합니다.

---

#### 준비하기: 프로젝트 생성 및 안드로이드 설정
- **프로젝트 생성:** Android Studio에서 새로운 프로젝트를 생성하고, 필요한 설정을 완료합니다.

---

#### 스텝 1: 화면 작성
1. **시간을 표시하는 TextView 배치**
   - XML 레이아웃 파일에서 시간을 표시할 TextView를 정의합니다.
   - 예시:
   ```xml
   <TextView
       android:id="@+id/timeDisplay"
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       android:textSize="48sp"
       android:text="00:00:00"
       android:layout_gravity="center" />
   ```

2. **TextView 정렬**
   - TextView의 속성을 사용하여 텍스트를 중앙에 정렬합니다.

3. **벡터 이미지 준비**
   - 타이머 제어를 위한 벡터 이미지를 res/drawable 디렉토리에 추가합니다.

4. **FloatingActionButton 소개**
   - FloatingActionButton은 주로 액션 버튼을 표시하는 데 사용됩니다.
   - 예시:
   ```xml
   <com.google.android.material.floatingactionbutton.FloatingActionButton
       android:id="@+id/startButton"
       android:layout_width="wrap_content"
       android:layout_height="wrap_content"
       android:src="@drawable/ic_start"
       android:layout_gravity="bottom|end"
       android:layout_margin="16dp" />
   ```

5. **타이머 시작용 FloatingActionButton 작성**
   - 타이머를 시작하는 버튼을 FloatingActionButton으로 정의합니다.

6. **타이머 초기화용 FloatingActionButton 작성**
   - 타이머를 초기화하는 버튼을 FloatingActionButton으로 정의합니다.

7. **랩 타임 기록을 위한 버튼 배치**
   - 랩 타임을 기록할 버튼을 추가합니다.

8. **랩 타임 표시하는 ScrollView 배치**
   - 랩 타임을 표시할 ScrollView와 그 내부에 동적으로 TextView를 추가합니다.
   - 예시:
   ```xml
   <ScrollView
       android:id="@+id/scrollView"
       android:layout_width="match_parent"
       android:layout_height="wrap_content"
       android:layout_gravity="center_horizontal">

       <LinearLayout
           android:id="@+id/lapContainer"
           android:layout_width="match_parent"
           android:layout_height="wrap_content"
           android:orientation="vertical" />
   </ScrollView>
   ```

---

#### 스텝 2: 타이머 구현하기
- **타이머 클래스 활용:** `Timer`와 `TimerTask`를 사용하여 타이머를 구현합니다.

**타이머 클래스 예시 코드:**
```kotlin
private var running = false
private var time = 0L
private var timer: Timer? = null

fun startTimer() {
    running = true
    timer = Timer()
    timer?.scheduleAtFixedRate(object : TimerTask() {
        override fun run() {
            time++
            runOnUiThread {
                timeDisplay.text = formatTime(time)
            }
        }
    }, 0, 1000) // 0ms 후에 시작하여 1000ms 간격으로 실행
}

fun stopTimer() {
    running = false
    timer?.cancel()
}

fun resetTimer() {
    running = false
    timer?.cancel()
    time = 0L
    timeDisplay.text = formatTime(time)
}

fun formatTime(time: Long): String {
    val seconds = time % 60
    val minutes = (time / 60) % 60
    val hours = time / 3600
    return String.format("%02d:%02d:%02d", hours, minutes, seconds)
}
```

---

#### 스텝 3: 랩 타임 기록하기
- **랩 타임 기록:** 랩 타임을 ScrollView에 동적으로 TextView를 추가하여 기록합니다.

**예시 코드:**
```kotlin
fun recordLapTime() {
    val lapTime = formatTime(time)
    val textView = TextView(this).apply {
        text = lapTime
        textSize = 16f
        layoutParams = LinearLayout.LayoutParams(
            LinearLayout.LayoutParams.WRAP_CONTENT,
            LinearLayout.LayoutParams.WRAP_CONTENT
        )
    }
    lapContainer.addView(textView)
}
```

---

#### 타이머 구현을 위한 주요 개념

1. **runOnUiThread:**
   - UI 스레드에서 실행할 작업을 큐에 넣습니다.
   - 예시:
   ```kotlin
   runOnUiThread {
       timeDisplay.text = formatTime(time)
   }
   ```

2. **Timer와 TimerTask:**
   - `Timer`는 일정 시간 간격으로 작업을 실행할 수 있는 클래스입니다.
   - `TimerTask`는 `Timer`에 의해 실행될 작업을 나타내는 클래스입니다.
   - 예시:
   ```kotlin
   private var timer: Timer? = null
   private val timerTask = object : TimerTask() {
       override fun run() {
           // 실행할 작업
       }
   }

   timer = Timer()
   timer?.scheduleAtFixedRate(timerTask, 0, 1000) // 0ms 후에 시작하여 1000ms 간격으로 실행
   ```

3. **ScrollView와 동적 View 추가:**
   - ScrollView는 화면을 넘어서 컨텐츠를 표시할 수 있는 뷰 그룹입니다.
   - 동적으로 뷰를 추가하여 랩 타임을 기록합니다.
   - 예시:
   ```kotlin
   val textView = TextView(this).apply {
       text = "랩 타임"
   }
   lapContainer.addView(textView)
   ```

---

#### 4. 액티비티 라이프사이클과 데이터 저장
**핵심 개념:**
- **onSaveInstanceState():** 액티비티가 예기치 않게 소멸되기 전에 상태를 저장합니다.
- **onRestoreInstanceState():** 저장된 상태를 복원합니다.
- **Bundle 객체 활용:** `putXXX()` 메서드로 데이터를 저장하고, `getXXX()` 메서드로 데이터를 복원합니다.

**예시 코드:**
```kotlin
override fun onSaveInstanceState(outState: Bundle) {
    super.onSaveInstanceState(outState)
    outState.putLong("time", time)
    outState.putBoolean("running", running)
}

override fun onRestoreInstanceState(savedInstanceState: Bundle) {
    super.onRestoreInstanceState(savedInstanceState)
    time = savedInstanceState.getLong("time")
    running = savedInstanceState.getBoolean("running")
    if (running) {
        startTimer()
    } else {
        timeDisplay.text = formatTime(time)
    }
}
```

---

#### 5. 무선 디버깅 방법
**핵심 개념:**
- **무선 디버깅:** USB 케이블 없이 무선 네트워크를 통해 디버깅하는 방법입니다.
- **기존 USB 디버깅과의 차이점:** 무선 디버깅은 USB 연결 없이 디버깅이 가능하여 더 유연하게 개발할 수 있습니다.

**무선 디버깅 설정 방법:**
1. 개발자 옵션에서 `ADB 무선 디버깅`을 활성화합니다.
2. Android Studio에서 `연결된 디바이스` 메뉴에서 `무선 디버깅`을 선택합니다.
3. 디바이스와 컴퓨터가 동일한 네트워크에 연결되어 있어야 합니다.

---

#### 6. Intent의 다양한 동작
**핵심 개념:**
- **Intent:** 안드로이드에서 액티비티 간 데이터 전달 및 다양한 작업을 수행하는 객체입니다.
- **주요 기능:**
  - 액티비티 시작
  - 서비스 시작
  - 브로드캐스트 전송
  - 데이터 전달

**자세한 내용은 [Intent 공식 문서](https://developer.android.com/reference/android/content/Intent?hl=ko)를 참고하세요.**

---

#### 7. Manifest 파일의 다양한 값
**핵심 개념:**
- **Manifest 파일:** 안드로이드 앱의 필수 구성 요소를 정의하는 XML 파일입니다.
- **주요 요소:**
  - `<application>`
  - `<activity>`
  - `<service>`
  - `<receiver>`
  - `<provider>`
  - 권한 선언 (`<uses-permission>`)

**자세한 내용은 [Manifest 공식

 문서](https://developer.android.com/guide/topics/manifest/manifest-intro#reference)를 참고하세요.**

---

#### 8. Kotlin의 다양한 Scope Functions
**핵심 개념:**
- **Scope Functions:** 객체 컨텍스트 내에서 코드 블록을 실행할 수 있는 함수입니다.
  - `let`
  - `run`
  - `with`
  - `apply`
  - `also`

**자세한 내용은 [Kotlin 공식 문서](https://kotlinlang.org/docs/scope-functions.html)를 참고하세요.**

---

이 가이드를 통해 13주차 강의 내용을 효과적으로 이해하고 실습할 수 있습니다. 각 주제별로 제시된 핵심 개념과 실습 내용을 복습하며 학습하세요.
