### 안드로이드 앱 개발 강의 10주차 이론 정리 가이드

안드로이드 앱 개발 강의 10주차에서는 LinearLayout, 변수 선언 (`val`과 `var`), 카운터 프로젝트를 중심으로 실습을 진행합니다. 이 문서는 학생들이 학기말 시험을 준비할 수 있도록 필요한 이론과 코틀린 및 안드로이드 개념을 정리한 것입니다.

---

#### 1. LinearLayout 이해
**핵심 개념:**
- **LinearLayout:** 안드로이드에서 가장 기본적인 레이아웃 중 하나로, 자식 뷰들을 수직(`vertical`) 또는 수평(`horizontal`) 방향으로 배치합니다.
- **속성:**
  - `orientation`: 자식 뷰의 배치 방향을 결정 (`vertical` 또는 `horizontal`).
  - `layout_weight`: 자식 뷰가 여유 공간을 차지하는 비율을 결정.
  - `layout_width`와 `layout_height`: 자식 뷰의 크기를 지정 (`wrap_content`, `match_parent`, 또는 특정 dp 값).

**예시 코드:**
```xml
<LinearLayout
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <TextView
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:text="First TextView" />

    <TextView
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        android:layout_weight="1"
        android:text="Second TextView" />
</LinearLayout>
```

---

#### 2. val과 var 변수 차이 이해 및 응용
**핵심 개념:**
- **val:** 변경 불가능한 변수 (immutable). 초기화 후 값을 변경할 수 없습니다. Java의 `final`과 유사합니다.
- **var:** 변경 가능한 변수 (mutable). 초기화 후 값을 변경할 수 있습니다.

**사용 예시:**
```kotlin
val immutableValue = 10
// immutableValue = 20 // 컴파일 에러 발생

var mutableValue = 10
mutableValue = 20 // 정상적으로 값 변경
```

**추가 개념:**
- **타입 추론:** 코틀린은 변수 선언 시 타입을 명시하지 않아도 컴파일러가 자동으로 타입을 추론합니다.
- **초기화:** `val` 변수는 선언과 동시에 초기화되어야 합니다. `var` 변수는 초기화 후 언제든지 값을 변경할 수 있습니다.

---

#### 3. 카운터 프로젝트
**핵심 개념:**
- **Button:** 클릭 이벤트를 처리할 수 있는 UI 컴포넌트.
- **TextView:** 텍스트를 표시하는 UI 컴포넌트.
- **onClickListener:** 버튼 클릭 시 이벤트를 처리하는 리스너.

**예시 프로젝트:**
1. **카운터 증가 버튼:**
    - XML 레이아웃에 TextView와 Button을 정의합니다.
    - 코틀린 코드에서 버튼 클릭 시 카운트 값을 증가시키고 TextView에 표시합니다.

```xml
<LinearLayout
    android:layout_width="match_parent"
    android:layout_height="match_parent"
    android:orientation="vertical">

    <TextView
        android:id="@+id/countTextView"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="0" />

    <Button
        android:id="@+id/incrementButton"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Increase" />
</LinearLayout>
```

```kotlin
val incrementButton: Button = findViewById(R.id.incrementButton)
val countTextView: TextView = findViewById(R.id.countTextView)
var count: Int = 0

incrementButton.setOnClickListener {
    count++
    countTextView.text = count.toString()
}
```

2. **카운터 감소 버튼 추가:**
    - XML 레이아웃에 감소 버튼을 추가합니다.
    - 코틀린 코드에서 감소 버튼 클릭 시 카운트 값을 감소시킵니다.

```xml
<Button
    android:id="@+id/decrementButton"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Decrease" />
```

```kotlin
val decrementButton: Button = findViewById(R.id.decrementButton)

decrementButton.setOnClickListener {
    count--
    countTextView.text = count.toString()
}
```

3. **카운터 초기화 버튼 추가:**
    - XML 레이아웃에 초기화 버튼을 추가합니다.
    - 코틀린 코드에서 초기화 버튼 클릭 시 카운트 값을 0으로 초기화합니다.

```xml
<Button
    android:id="@+id/resetButton"
    android:layout_width="wrap_content"
    android:layout_height="wrap_content"
    android:text="Reset" />
```

```kotlin
val resetButton: Button = findViewById(R.id.resetButton)

resetButton.setOnClickListener {
    count = 0
    countTextView.text = count.toString()
}
```

---

#### 4. findViewById와 onClick 이벤트 핸들링
**핵심 개념:**
- **findViewById:** XML 레이아웃 파일에서 정의한 뷰를 코드에서 참조하기 위한 메서드입니다.
- **onClick 이벤트 핸들링:** 버튼 등 클릭 가능한 뷰의 클릭 이벤트를 처리하는 방법입니다.

**예시 코드:**
```kotlin
val myButton: Button = findViewById(R.id.myButton)
myButton.setOnClickListener {
    // 버튼 클릭 시 실행할 코드
}
```

**추가 개념:**
- **뷰 바인딩:** findViewById를 사용하는 대신 뷰 바인딩을 사용하여 코드를 더 간결하고 안전하게 만들 수 있습니다.
- **람다 표현식:** 코틀린에서 이벤트 핸들러를 간결하게 작성하기 위해 람다 표현식을 사용할 수 있습니다.

---



이 가이드를 통해 10주차 강의 내용을 효과적으로 이해하고 실습할 수 있습니다. 각 주제별로 제시된 핵심 개념과 실습 내용을 복습하며 학습하세요.
