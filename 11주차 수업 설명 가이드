### 안드로이드 앱 개발 강의 11주차 이론 정리 가이드

안드로이드 앱 개발 강의 11주차에서는 단위 변환기 앱 프로젝트와 관련된 여러 내용을 다루고, Activity 라이프사이클 및 데이터 저장 방법에 대해 학습합니다. 이 문서는 학생들이 학기말 시험을 준비할 수 있도록 필요한 이론과 코틀린 및 안드로이드 개념을 정리한 것입니다.

---

#### 1. Activity Lifecycle과 onSaveInstanceState
**핵심 개념:**
- **Activity Lifecycle:** 안드로이드 액티비티는 생성, 시작, 재개, 일시 정지, 중지, 소멸의 생명주기를 가집니다. 각 단계에서 특정 메서드가 호출됩니다:
  - `onCreate()`: 액티비티가 처음 생성될 때 호출됩니다.
  - `onStart()`: 액티비티가 화면에 표시되기 직전에 호출됩니다.
  - `onResume()`: 액티비티가 상호작용 가능한 상태가 될 때 호출됩니다.
  - `onPause()`: 다른 액티비티가 포그라운드로 이동하기 직전에 호출됩니다.
  - `onStop()`: 액티비티가 더 이상 화면에 보이지 않을 때 호출됩니다.
  - `onDestroy()`: 액티비티가 소멸되기 직전에 호출됩니다.

- **onSaveInstanceState()와 onRestoreInstanceState():** 
  - `onSaveInstanceState()`는 액티비티가 일시적으로 소멸될 때(예: 화면 회전) 현재 상태를 저장할 수 있게 합니다. 이는 사용자가 앱을 재개할 때 상태를 복원할 수 있도록 합니다.
  - `onRestoreInstanceState()`는 저장된 상태를 복원합니다. 이 메서드는 `onCreate()`와 `onStart()` 사이에서 호출됩니다.

**Activity가 종료되는 경우:**
- 사용자가 '뒤로 가기(Back)' 버튼을 눌러 Activity를 종료한 경우
- Activity가 백그라운드에 있을 때 시스템 메모리가 부족해진 경우 (OS가 강제 종료)
- 언어 설정을 변경할 때
- 화면을 가로/세로로 변경할 때
- 폰 크기나 폰트 크기를 변경했을 때

**예시 코드:**
```kotlin
override fun onSaveInstanceState(outState: Bundle) {
    super.onSaveInstanceState(outState)
    // 현재 상태를 저장합니다. 예: 카운트 값 저장
    outState.putInt("count", count)
}

override fun onRestoreInstanceState(savedInstanceState: Bundle) {
    super.onRestoreInstanceState(savedInstanceState)
    // 저장된 상태를 복원합니다. 예: 저장된 카운트 값 복원
    count = savedInstanceState.getInt("count")
}
```

**상황 예시:**
- **화면 회전:** 화면이 회전할 때 액티비티는 소멸되고 다시 생성됩니다. 이 때 `onSaveInstanceState()`를 사용하여 현재 상태를 저장하고, `onRestoreInstanceState()`를 사용하여 저장된 상태를 복원할 수 있습니다.

---

#### 2. ConstraintLayout 이해 및 활용
**핵심 개념:**
- **ConstraintLayout:** 복잡한 레이아웃을 효율적으로 설계할 수 있는 레이아웃입니다. ConstraintLayout은 제약 조건을 설정하여 뷰의 위치와 크기를 조절할 수 있습니다. 자식 뷰들 사이의 상대적 위치를 정의하여 다양한 화면 크기에 대응할 수 있습니다.
- **속성:**
  - `layout_constraintStart_toStartOf`
  - `layout_constraintEnd_toEndOf`
  - `layout_constraintTop_toTopOf`
  - `layout_constraintBottom_toBottomOf`

**예시 코드:**
```xml
<ConstraintLayout
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <Button
        android:id="@+id/button"
        android:layout_width="wrap_content"
        android:layout_height="wrap_content"
        android:text="Button"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />
</ConstraintLayout>
```

---

#### 3. ViewBinding
**핵심 개념:**
- **ViewBinding:** findViewById를 사용하는 대신 뷰 바인딩을 사용하여 코드의 안전성과 가독성을 높입니다. 뷰 바인딩은 XML 레이아웃 파일을 바인딩 클래스에 연결하여 뷰를 쉽게 참조할 수 있게 해줍니다.
- **설정 방법:**
  - 프로젝트의 `build.gradle` 파일에서 뷰 바인딩을 활성화합니다:
  ```groovy
  android {
      ...
      viewBinding {
          enabled = true
      }
  }
  ```
  - 각 액티비티나 프래그먼트에서 뷰 바인딩 객체를 생성하여 사용합니다.

**예시 코드:**
```kotlin
class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.myButton.setOnClickListener {
            // 버튼 클릭 시 동작
        }
    }
}
```

---

#### 4. 단위 변환기 앱 프로젝트
**핵심 개념:**
- **입력 단위와 출력 단위 선택:** 사용자가 입력 단위와 출력 단위를 선택할 수 있도록 합니다.
- **입력 값의 실시간 변환:** 사용자가 입력한 값에 따라 출력 단위를 실시간으로 변환하여 보여줍니다.

**예시 코드:**
1. **레이아웃 구성:**
    - XML 레이아웃 파일에 EditText, TextView, Spinner 등을 정의합니다.

```xml
<ConstraintLayout
    android:layout_width="match_parent"
    android:layout_height="match_parent">

    <EditText
        android:id="@+id/inputValue"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toTopOf="parent"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <Spinner
        android:id="@+id/inputUnit"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@id/inputValue"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />

    <TextView
        android:id="@+id/outputValue"
        android:layout_width="0dp"
        android:layout_height="wrap_content"
        app:layout_constraintTop_toBottomOf="@id/inputUnit"
        app:layout_constraintStart_toStartOf="parent"
        app:layout_constraintEnd_toEndOf="parent" />
</ConstraintLayout>
```

2. **변환 로직 구현:**
    - 코틀린 코드에서 입력 값을 받아 변환하고 결과를 출력합니다.

```kotlin
class MainActivity : AppCompatActivity() {
    private lateinit var binding: ActivityMainBinding

    override fun onCreate(savedInstanceState: Bundle?) {
        super.onCreate(savedInstanceState)
        binding = ActivityMainBinding.inflate(layoutInflater)
        setContentView(binding.root)

        binding.inputValue.addTextChangedListener {
            convertValue()
        }

        binding.inputUnit.onItemSelectedListener = object : AdapterView.OnItemSelectedListener {
            override fun onItemSelected(parent: AdapterView<*>, view: View, position: Int, id: Long) {
                convertValue()
            }

            override fun onNothingSelected(parent: AdapterView<*>) {}
        }
    }

    private fun convertValue() {
        val inputValue = binding.inputValue.text.toString().toDoubleOrNull() ?: return
        val inputUnit = binding.inputUnit.selectedItem.toString()
        val outputValue = when (inputUnit) {
            "cm" -> inputValue / 100
            "m" -> inputValue * 100
            else -> inputValue
        }
        binding.outputValue.text = outputValue.toString()
    }
}
```

---

#### 5. 게시판
**핵심 개념:**
- **Q&A:** 실습 중 발생한 문제를 해결하기 위해 질문하고 답변을 받는 과정입니다.
- **리뷰:** 실습 결과를 공유하고 피드백을 주고받는 과정입니다.

**실습 내용:**
1. **질문하기:** 실습 중 궁금한 점이나 문제점을 게시판에 올려 질문합니다.
2. **리뷰 작성:** 다른 학생들의 질문에 답변을 하거나, 자신의 실습 결과를 리뷰하며 개선점을 공유합니다.

---

이 가이드를 통해 11주차 강의 내용을 효과적으로 이해하고 실습할 수 있습니다. 각 주제별로 제시된 핵심 개념과 실습 내용을 복습하며 학습하세요.
