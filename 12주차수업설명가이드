### 안드로이드 앱 개발 강의 12주차 이론 정리 가이드

안드로이드 앱 개발 강의 12주차에서는 다양한 코틀린과 안드로이드 이론 및 문법 개념을 심화 학습합니다. 이 문서는 학생들이 학기말 시험을 준비할 수 있도록 필요한 이론과 개념을 정리한 것입니다.

---

#### 1. 인스턴스 변수와 지역 변수
**핵심 개념:**
- **Instance Variable (인스턴스 변수):** 클래스의 속성 변수로, 클래스의 인스턴스가 생성될 때마다 초기화됩니다. 객체가 소멸될 때까지 유지됩니다.
  - 예시:
  ```kotlin
  class MyClass {
      var instanceVariable: Int = 0
  }
  ```
- **Local Variable (지역 변수):** 메서드나 블록 내부에서 선언된 변수로, 해당 메서드나 블록이 실행되는 동안에만 존재합니다.
  - 예시:
  ```kotlin
  fun myFunction() {
      val localVariable: Int = 0
  }
  ```

**차이점:**
- **유효 범위:** 인스턴스 변수는 클래스 내 어디서든 접근할 수 있지만, 지역 변수는 선언된 메서드나 블록 내에서만 접근 가능합니다.
- **생명 주기:** 인스턴스 변수는 객체의 생명 주기와 같으며, 지역 변수는 메서드나 블록의 생명 주기와 같습니다.

---

#### 2. lateinit
**핵심 개념:**
- **lateinit:** 코틀린에서 변수의 초기화를 늦출 수 있도록 하는 키워드입니다. 주로 `var`와 함께 사용되며, 반드시 나중에 초기화되어야 합니다. 초기화되지 않고 사용되면 `UninitializedPropertyAccessException` 예외가 발생합니다.
  - 예시:
  ```kotlin
  lateinit var lateInitVariable: String

  fun initializeVariable() {
      lateInitVariable = "Initialized"
  }
  ```

**사용 시 주의사항:**
- `lateinit`은 기본형 변수 (Int, Long 등)에는 사용할 수 없습니다.
- 변수를 사용하기 전에 반드시 초기화해야 합니다. 그렇지 않으면 예외가 발생합니다.

---

#### 3. addTextChangedListener
**핵심 개념:**
- **addTextChangedListener:** `EditText`에 텍스트 변경 리스너를 추가하여 텍스트가 변경될 때마다 호출되는 콜백을 처리합니다.
  - 예시:
  ```kotlin
  editText.addTextChangedListener(object : TextWatcher {
      override fun beforeTextChanged(s: CharSequence?, start: Int, count: Int, after: Int) {}
      override fun onTextChanged(s: CharSequence?, start: Int, before: Int, count: Int) {}
      override fun afterTextChanged(s: Editable?) {
          // 텍스트가 변경된 후 호출되는 부분
      }
  })
  ```

**주요 메서드:**
- `beforeTextChanged`: 텍스트가 변경되기 전에 호출됩니다.
- `onTextChanged`: 텍스트가 변경될 때 호출됩니다.
- `afterTextChanged`: 텍스트가 변경된 후 호출됩니다.

---

#### 4. Activity 라이프사이클 메서드 오버라이딩
**핵심 개념:**
- **라이프사이클 메서드:** `onCreate()`, `onStart()`, `onResume()`, `onPause()`, `onStop()`, `onDestroy()`, `onRestart()`
- **오버라이딩:** 라이프사이클 메서드를 재정의하여 특정 이벤트에 반응할 수 있도록 합니다.

**예시 코드:**
```kotlin
override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    setContentView(R.layout.activity_main)
}

override fun onStart() {
    super.onStart()
    // Activity가 화면에 나타날 때 실행될 코드
}

override fun onResume() {
    super.onResume()
    // Activity가 상호작용 가능한 상태가 될 때 실행될 코드
}

override fun onPause() {
    super.onPause()
    // Activity가 일시정지 상태가 될 때 실행될 코드
}

override fun onStop() {
    super.onStop()
    // Activity가 화면에서 사라질 때 실행될 코드
}

override fun onDestroy() {
    super.onDestroy()
    // Activity가 소멸될 때 실행될 코드
}
```

**Android Studio에서 Generate 기능 활용하기:**
1. 클래스 내부에서 `Ctrl + O`를 눌러 오버라이딩 가능한 메서드 목록을 봅니다.
2. 원하는 라이프사이클 메서드를 선택하여 오버라이딩합니다.

---

#### 5. onSaveInstanceState와 onRestoreInstanceState
**핵심 개념:**
- **onSaveInstanceState():** 액티비티가 예기치 않게 소멸되기 전에 상태를 저장합니다.
- **onRestoreInstanceState():** 저장된 상태를 복원합니다.
- **Bundle 객체 활용:** `putXXX()` 메서드로 데이터를 저장하고, `getXXX()` 메서드로 데이터를 복원합니다.

**예시 코드:**
```kotlin
override fun onSaveInstanceState(outState: Bundle) {
    super.onSaveInstanceState(outState)
    // 현재 상태를 저장합니다. 예: 카운트 값 저장
    outState.putInt("count", count)
}

override fun onRestoreInstanceState(savedInstanceState: Bundle) {
    super.onRestoreInstanceState(savedInstanceState)
    // 저장된 상태를 복원합니다. 예: 저장된 카운트 값 복원
    count = savedInstanceState.getInt("count")
}
```

**화면 회전 시 상태 유지:**
- 세로 모드에서 가로 모드로 변경할 때 입력값이나 단위를 유지하려면 `onSaveInstanceState()`와 `onRestoreInstanceState()`를 활용합니다.

---

#### 6. 무선 디버깅 방법
**핵심 개념:**
- **무선 디버깅:** USB 케이블 없이 무선 네트워크를 통해 디버깅하는 방법입니다.
- **기존 USB 디버깅과의 차이점:** 무선 디버깅은 USB 연결 없이 디버깅이 가능하여 더 유연하게 개발할 수 있습니다.

**무선 디버깅 설정 방법:**
1. 개발자 옵션에서 `ADB 무선 디버깅`을 활성화합니다.
2. Android Studio에서 `연결된 디바이스` 메뉴에서 `무선 디버깅`을 선택합니다.
3. 디바이스와 컴퓨터가 동일한 네트워크에 연결되어 있어야 합니다.

---

#### 7. Intent의 다양한 동작
**핵심 개념:**
- **Intent:** 안드로이드에서 액티비티 간 데이터 전달 및 다양한 작업을 수행하는 객체입니다.
- **주요 기능:**
  - 액티비티 시작
  - 서비스 시작
  - 브로드캐스트 전송
  - 데이터 전달

**자세한 내용은 [Intent 공식 문서](https://developer.android.com/reference/android/content/Intent?hl=ko)를 참고하세요.**

---

#### 8. Manifest 파일의 다양한 값
**핵심 개념:**
- **Manifest 파일:** 안드로이드 앱의 필수 구성 요소를 정의하는 XML 파일입니다.
- **주요 요소:**
  - `<application>`
  - `<activity>`
  - `<service>`
  - `<receiver>`
  - `<provider>`
  - 권한 선언 (`<uses-permission>`)

**자세한 내용은 [Manifest 공식 문서](https://developer.android.com/guide/topics/manifest/manifest-intro#reference)를 참고하세요.**

---

#### 9. Kotlin의 다양한 Scope Functions
**핵심 개념:**
- **Scope Functions:** 객체 컨텍스트 내에서 코드 블록을 실행할 수 있는 함수입니다.
  - `let`
  - `run`
  - `with`
  - `apply`
  - `also`

**자세한 내용은 [Kotlin 공식 문서](https://kotlinlang.org/docs/scope-functions.html)를 참고하세요.**

---

이 가이드를 통해 12주차 강의 내용을 효과적으로 이해하고 실습할 수 있습니다. 각 주제별로 제시된 핵심 개념과 실습 내용을 복습하며 학습하세요.
